$hdr=@"
###############################################
# Remediate-Curl-CVE-2023-38545.ps1
# QID 378936 
# https://msrc.microsoft.com/update-guide/en-US/advisory/CVE-2023-38545
# This script will create a Windows Defender App Control policy to not allow the system to run Curl.exe version 0.0.0.0 to 8.4.0.0
# CAUTION: This script WILL DISABLE curl.exe from running until Microsoft has patched the binary!
# Windows Updates and Store updates have been tested, but use at your own risk!
# As of 11-10-2023, a month after the vulnerability went public, this patch is still not available from Microsoft.
"@

$pwd = pwd             # We will return here after
$newcwd = "C:\Temp"    # Script (Merge-CIPolicy) must run from a non-UNC path!

Write-Output "`n$hdr`n"

Write-Output "[.] Checking if we are running as admin .."
$currentPrincipal = New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent())
if ($currentPrincipal.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)) {
  Write-Output "[+] Looks like we are admin."
} else {
  Write-Output "[-] Please run this script from an elevated powershell session!"
}

if (!(Test-Path $newcwd)) {
  Write-Output "[.] Temporary path $newcwd not found, creating.. "
  try { 
    $null = New-Item -ItemType Directory -Path $newcwd -Force 
    Set-Location $newcwd
  } catch {
    Write-Output "[!] Couldn't create or cd to $newcwd ..exiting! "
    exit
  }
  if (!(Test-Path $newcwd)) {
    Write-Output "[.] $newcwd path not found still, exiting!"
    exit
  }
} else {
  Set-Location $newcwd
}

Write-Output "[.] Checking Windows version information .."
$osVersion = [System.Environment]::OSVersion.Version

# Check if it's Windows 11 or Windows 10 version 1903 and above
if (($osVersion.Major -eq 10 -and $osVersion.Minor -ge 0 -and $osVersion.Build -ge 18362) -or
    ($osVersion.Major -eq 11)) {
    Write-Output "[!] The system is running Windows 11 or Windows 10 version 1903 and above."
    $osversion = 1
}
# Check if it's Windows Server 2022 and above
elseif (($osVersion.Major -eq 10 -and $osVersion.Minor -eq 0 -and $osVersion.Build -ge 20348) -or
    ($osVersion.Major -gt 10)) {
    Write-Output "[!] The system is running Windows Server 2022 and above."
    $osversion = 1
}
else {
    Write-Output "[!] The system is not running any of the specified Windows versions."
    $osversion = 0
}

Write-Output "[.] Creating new WDAC rule to deny Curl <= 8.4.0.0 from running .."
$rule = new-cipolicyrule -DriverFilePath "$env:systemroot\system32\curl.exe" -Level FilePublisher -Deny
$rule[0].attributes["MinimumFileVersion"] = "0.0.0.0"
$rule[0].attributes["MaximumFileVersion"] = "8.4.0.0"
Write-Output "[.] Merging all policies and current policy into Deny-Curl.xml .."

### THIS DOESN'T WORK FROM A UNC PATH!!! ###
try {
  merge-cipolicy "$env:systemroot\schemas\CodeIntegrity\ExamplePolicies\AllowAll.xml" -Rules $rule -OutputFilePath "$($newcwd)\Deny-Curl.xml"
} catch {

  Write-Output "[!] Error w/ Merge-CIPolicy. Likely you are running this script from a UNC path, or something else went wrong."
  exit
}

$WDACPolicyXMLFile = "deny-curl.xml"
[xml]$WDACPolicy = Get-Content -Path $WDACPolicyXMLFile
if (($WDACPolicy.SiPolicy.PolicyID) -ne $null) ## Multiple policy format (For Windows builds 1903+ only, including Server 2022)
{
    $PolicyID = $WDACPolicy.SiPolicy.PolicyID
    $PolicyBinary = "$($newcwd)\"+$PolicyID+".cip"
    Write-Output "[.] Creating Binary policy file $($newcwd)\$($PolicyId).cip .."
}
else ## Single policy format (Windows Server 2016 and 2019, and Windows 10 1809 LTSC)
{
    Write-Output "[.] Creating Binary policy file SiPolicy.p7b .."
    $PolicyBinary = "$($newcwd)\SiPolicy.p7b"
}
 
Write-Output "[.] Writing $PolicyBinary to local folder .."
$null = ConvertFrom-CIPolicy -XmlFilePath $WDACPolicyXMLFile -BinaryFilePath $PolicyBinary

Write-Output "[.] Downloading Refreshpolicy.exe from Microsoft .."
$RefreshPolicyTool = "$($newcwd)\RefreshPolicy.exe"
wget "https://download.microsoft.com/download/2/d/5/2d598537-6131-40ba-a1e3-f664b97fef6e/RefreshCIPolicy/AMD64/RefreshPolicy(AMD64).exe" -OutFile $RefreshPolicyTool
if (!(Test-Path $RefreshPolicyTool)) {
  Write-Output "[-] RefreshPolicyTool could not be downloaded: $refreshpolicytool - Error!!!"
  exit
}

if ($osversion) {
  Write-Output "[+] Deploying policies for Windows 11, Windows 10 version 1903 and above, and Windows Server 2022 and above .."
  # Policy binary files should be named as {GUID}.cip for multiple policy format files (where {GUID} = <PolicyId> from the Policy XML)
  if ($PolicyBinary) {
    $DestinationFolder = $env:windir+"\System32\CodeIntegrity\CIPolicies\Active\"    
    $null = Copy-Item -Path $PolicyBinary -Destination $DestinationFolder -Force
    if (Test-Path $RefreshPolicyTool) {
      & $RefreshPolicyTool 
    } else {
      Write-Output "[-] RefreshPolicyTool not found: $refreshpolicytool - Error!!!"
      exit
    }
  }
} else {
  Write-Output "[+] Deploying policies for all other versions of Windows and Windows Server .."
  # Policy binary files should be named as SiPolicy.p7b for Windows 10 versions earlier than 1903
  if ($PolicyBinary) {
    $DestinationBinary = $env:windir+"\System32\CodeIntegrity\SiPolicy.p7b"
    $null = Copy-Item  -Path $PolicyBinary -Destination $DestinationBinary -Force
    $null = Invoke-CimMethod -Namespace root\Microsoft\Windows\CI -ClassName PS_UpdateAndCompareCIPolicy -MethodName Update -Arguments @{FilePath = $DestinationBinary}
  }
}

Set-Location $pwd
Write-Output "[!] Done!"